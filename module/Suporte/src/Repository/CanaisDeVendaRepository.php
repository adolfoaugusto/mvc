<?php

namespace Rtd\Suporte\Repository;

use DateTime;
use Helpers\ValidatorForm\ValidacaoTrait;
use Rtd\Suporte\Entity\Central\Pessoa;
use Rtd\Suporte\Entity\Financeiro\CanaisDeVenda;
use Rtd\Suporte\Repository\Interfaces\CanalDeVendasRepositoryInterface;
use Sistema\Exception\SistemaException;

/**
 * CanaisDeVendaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CanaisDeVendaRepository extends \Doctrine\ORM\EntityRepository implements CanalDeVendasRepositoryInterface
{

    use ValidacaoTrait;

    /**
     * @param array $dados
     * @return null|object|CanaisDeVenda
     * @throws SistemaException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Doctrine\ORM\TransactionRequiredException
     * @throws \Sistema\Exception\ValidacaoException
     */
    public function salvar($dados = [])
    {

        $ni = preg_replace('/\D/','',$dados['ni']);

        $pessoa = $this->getEntityManager()->find(Pessoa::class,$ni);

        if(!$pessoa){
            throw new SistemaException('Nenhuma pessoa foi encontrada, não foi possível inserir o banco');
        }

        $canaisDeVenda = $this->find($pessoa);

        if(is_null($canaisDeVenda)) {
            $canaisDeVenda = new CanaisDeVenda();
            $canaisDeVenda->setNi($pessoa);
            $this->getEntityManager()->persist($canaisDeVenda);
            /**
             * Chave é gerada somente em novos cadastros
             */
            $chave = sha1($canaisDeVenda->getNi()->getNi().$canaisDeVenda->getDataAdesao()->getTimestamp());
            $canaisDeVenda->setChave($chave);
        }

        $canaisDeVenda->setIdentificador($dados['identificador']);
        $canaisDeVenda->setAtivo(isset($dados['ativo']) ?? false);
        $canaisDeVenda->setDataAdesao(new DateTime($dados['dataAdesao']));



        $this->validarSubject($canaisDeVenda);

        $this->getEntityManager()->flush($canaisDeVenda);

        return $canaisDeVenda;
    }


    /**
     * @param $id
     * @return null|CanaisDeVenda
     * @throws SistemaException
     */
    public function editar($id):? CanaisDeVenda
    {

        $ni = str_replace('[/\D/]/g', '', $id);
        /**
         * @var CanaisDeVenda $canaisDeVendas
         */
        $canaisDeVendas = $this->find($id);

        if(is_null($canaisDeVendas)){
            throw new SistemaException("O Canal de Venda #$id não existe!");
        }

        return $canaisDeVendas;
    }

    /**
     * @param $id
     * @return bool
     * @throws SistemaException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function deletar($id)
    {
        $canaisDeVendas = $this->find($id);

        if(is_null($canaisDeVendas)){
            throw new SistemaException("O seguinte #$id Não pode ser excluído, ou não existe!");
        }

        $this->getEntityManager()->remove($canaisDeVendas);

        $this->getEntityManager()->flush();

        return true;

    }

}
