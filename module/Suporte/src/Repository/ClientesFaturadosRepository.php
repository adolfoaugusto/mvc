<?php

namespace Rtd\Suporte\Repository;

use DateTime;
use Doctrine\ORM\AbstractQuery;
use Doctrine\ORM\Query;
use Helpers\ValidatorForm\ValidacaoTrait;
use Rtd\Suporte\Entity\Central\Pedidos;
use Rtd\Suporte\Entity\Central\PedidosItens;
use Rtd\Suporte\Entity\Central\Pessoa;
use Rtd\Suporte\Entity\Central\Protocolos;
use Rtd\Suporte\Entity\Central\Servicos;
use Rtd\Suporte\Entity\Financeiro\ClientesFaturados;
use Rtd\Suporte\Entity\Financeiro\CustasServicos;
use Rtd\Suporte\Repository\Interfaces\ClientesFaturadosRepositoryInterface;
use Sistema\Exception\SistemaException;
use Throwable;

/**
 * ClientesFaturados
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientesFaturadosRepository extends \Doctrine\ORM\EntityRepository implements ClientesFaturadosRepositoryInterface
{

    use ValidacaoTrait;

    /**
     * @param array $dados
     * @return null|object|ClientesFaturados
     * @throws SistemaException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Doctrine\ORM\TransactionRequiredException
     * @throws \Sistema\Exception\ValidacaoException
     */
    public function salvar($dados = []){

        $ni = preg_replace('/\D/','',$dados['ni']);
        $pessoa = $this->getEntityManager()->find(Pessoa::class,$ni);

        if(is_null($pessoa)){
            throw  new SistemaException('Pessoa não encontrada, não posso cadastrar!');
        }

        $clienteFaturado  = $this->find($pessoa);

        if(is_null($clienteFaturado)){
            $clienteFaturado = new ClientesFaturados();
            $clienteFaturado->setNi($pessoa);
            $this->getEntityManager()->persist($clienteFaturado);
        }

        $clienteFaturado->setDataAdesao(new DateTime($dados['dataAdesao']));
        $clienteFaturado->setDiaFechamentoFatura((int) $dados['diaFechamentoFatura']);
        $clienteFaturado->setPeriodicidadeFatura((int) $dados['periodicidadeFatura']);

        if($clienteFaturado->getDiaFechamentoFatura())

        $this->validarSubject($clienteFaturado);

        $this->getEntityManager()->flush($clienteFaturado);

        return $clienteFaturado;

    }


    /**
     * @param $id
     * @return ClientesFaturados
     * @throws SistemaException
     */
    public function editar($id): ClientesFaturados
    {

        $clientesFaturado = $this->find($id);

        if(is_null($clientesFaturado)){
            throw new SistemaException("O  #$id não existe na tabela {$this->_entityName}!");
        }

        return $clientesFaturado;
    }

    /**
     * @param $id
     * @return bool
     * @throws SistemaException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function deletar($id){

        try {

            $bancos = $this->find($id);

            if (is_null($bancos)) {
                throw new SistemaException("O seguinte #$id não foi encontrado, ou foi exluído do sistema ");
            }

            $this->getEntityManager()->remove($bancos);

            $this->getEntityManager()->flush();

            return true;

        }catch (Throwable $e){

            throw  new SistemaException("Não foi possível deletar o objeto #$id",400);

        }


    }

    /**
     * @param string $ni
     * @return mixed
     */
    public function buscarPedidosClientesFaturados(string $ni)
    {
        return $this->createQueryBuilder('cf')
                    ->innerJoin(Pedidos::class,'ped','WITH','cf.ni = ped.niCliente')
//                    ->innerJoin(PedidosItens::class, 'pedItens','WITH','ped.id = pedItens.pedidoId')
//                    ->innerJoin(Protocolos::class,'proto','WITH','pedItens.protocolo = proto.protocolo')
//                    ->innerJoin(Servicos::class,'serve','WITH','proto.idServico = serve.idServico')
//                    ->innerJoin(CustasServicos::class,'custaServe','WITH','custaServe.protocolo = proto.protocolo')
//                    ->where("cf.ni = '{$ni}' AND ped.id = pedItens.pedidoId")
                    ->getQuery()
                    ->getResult();
    }

    /**
     * @param string $ni
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function buscarClienteFaturadoPorNi(string $ni)
    {
        return $this->createQueryBuilder('cf')
                    ->where("cf.ni = '{$ni}'")
                    ->getQuery()
                    ->execute()[0];
    }
}
